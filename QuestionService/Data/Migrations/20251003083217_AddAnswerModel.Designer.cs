// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QuestionService.Data;

#nullable disable

namespace QuestionService.Data.Migrations
{
    [DbContext(typeof(QuestionDbContext))]
    [Migration("20251003083217_AddAnswerModel")]
    partial class AddAnswerModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QuestionService.Models.Answer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserDisplayName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("QuestionService.Models.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<int>("AnswerCount")
                        .HasColumnType("integer");

                    b.Property<string>("AskerDisplayName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("AskerId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasAcceptedAnswer")
                        .HasColumnType("boolean");

                    b.PrimitiveCollection<List<string>>("TagSlugs")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.Property<int>("Votes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuestionService.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = "aspire",
                            Description = "A composable, opinionated stack for building distributed apps with .NET. Provides dashboard, diagnostics, and simplified service orchestration.",
                            Name = "Aspire",
                            Slug = "aspire"
                        },
                        new
                        {
                            Id = "keycloak",
                            Description = "An open-source identity and access management solution for modern applications and services. Integrates easily with OAuth2, OIDC, and SSO.",
                            Name = "Keycloak",
                            Slug = "keycloak"
                        },
                        new
                        {
                            Id = "dotnet",
                            Description = "A modern, cross-platform development platform for building cloud, web, mobile, desktop, and IoT apps using C# and F#.",
                            Name = ".NET",
                            Slug = "dotnet"
                        },
                        new
                        {
                            Id = "ef-core",
                            Description = "A modern object-database mapper (ORM) for .NET that supports LINQ, change tracking, and migrations for working with relational databases.",
                            Name = "Entity Framework Core",
                            Slug = "ef-core"
                        },
                        new
                        {
                            Id = "wolverine",
                            Description = "A high-performance messaging and command-handling framework for .NET with built-in support for Mediator, queues, retries, and durable messaging.",
                            Name = "Wolverine",
                            Slug = "wolverine"
                        },
                        new
                        {
                            Id = "postgresql",
                            Description = "A powerful, open-source object-relational database system known for reliability, feature richness, and standards compliance.",
                            Name = "PostgreSQL",
                            Slug = "postgresql"
                        },
                        new
                        {
                            Id = "signalr",
                            Description = "A real-time communication library for ASP.NET that enables server-to-client messaging over WebSockets, long polling, and more.",
                            Name = "SignalR",
                            Slug = "signalr"
                        },
                        new
                        {
                            Id = "nextjs",
                            Description = "A React framework for building fast, full-stack web apps with server-side rendering, routing, and static site generation.",
                            Name = "Next.js",
                            Slug = "nextjs"
                        },
                        new
                        {
                            Id = "typescript",
                            Description = "A statically typed superset of JavaScript that compiles to clean JavaScript. Helps build large-scale apps with tooling support.",
                            Name = "TypeScript",
                            Slug = "typescript"
                        },
                        new
                        {
                            Id = "microservices",
                            Description = "An architectural style that structures an application as a collection of loosely coupled services that can be independently deployed and scaled.",
                            Name = "Microservices",
                            Slug = "microservices"
                        });
                });

            modelBuilder.Entity("QuestionService.Models.Answer", b =>
                {
                    b.HasOne("QuestionService.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuestionService.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
